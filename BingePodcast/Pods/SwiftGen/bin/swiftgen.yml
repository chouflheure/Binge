## Note: all of the config entries below are just examples with placeholders. Be sure to edit and adjust to your needs when uncommenting.

## Generate constants for your Assets Catalogs, including constants for images, colors, ARKit resources, etc.
##   This example also shows how to provide additional parameters to your template to customize the output.
##   - Especially the `forceProvidesNamespaces: true` param forces to create sub-namespace for each folder/group used in your Asset Catalogs, even the ones without "Provides Namespace". Without this param, SwiftGen only generates sub-namespaces for folders/groups which have the "Provides Namespace" box checked in the Inspector pane.
##   - To know which params are supported for a template, use `swiftgen template doc xcassets swift5` to open the template documentation on GitHub.

# Generate String
strings:
  inputs: ../../../BingePodcast/ProductionsFiles/Assets/Strings.strings
  outputs:
    - templateName: structured-swift5
      output: ../../../BingePodcast/ProductionsFiles/Generated/Strings.gen.swift

# Generate Font
#fonts:
#  inputs: /path/to/font/dir
#  outputs:
#    templateName: swift5
#    output: Fonts.swift

# Generate Assets
xcassets:
    - inputs: ../../../BingePodcast/ProductionsFiles/Assets/Colors.xcassets
      outputs:
        - templatePath: template_disable_swiftFormat.stencil
          params:
            forceProvidesNamespaces: true
            enumName: Colors
          output: ../../../BingePodcast/ProductionsFiles/Generated/Colors.gen.swift

    - inputs: ../../../BingePodcast/ProductionsFiles/Assets/Assets.xcassets
      outputs:
        - templatePath: template_disable_swiftFormat.stencil
          params:
            forceProvidesNamespaces: true
            enumName: Assets
          output: ../../../BingePodcast/ProductionsFiles/Generated/Assets.gen.swift

## For more info, use `swiftgen config doc` to open the full documentation on GitHub.
## https://github.com/SwiftGen/SwiftGen/tree/6.6.2/Documentation/
